# Commands

export const QRCodeGenerator = props => {
  const {appId: initialAppId = "", hideInput = false, baseUrl = "https://worldcoin.org/mini-app", hideDetails = false} = props || ({});
  const [appId, setAppId] = useState(initialAppId);
  const trimmed = useMemo(() => appId.trim(), [appId]);
  const isValid = useMemo(() => (/^app_[a-f0-9]+$/).test(trimmed), [trimmed]);
  const payload = useMemo(() => {
    if (!trimmed || !isValid) return "";
    return `${baseUrl}?app_id=${trimmed}`;
  }, [trimmed, isValid, baseUrl]);
  const qrSrc = useMemo(() => {
    const size = "200x200";
    const data = encodeURIComponent(payload);
    return `https://api.qrserver.com/v1/create-qr-code/?size=${size}&data=${data}`;
  }, [payload]);
  const containerGridClass = hideDetails ? "" : "grid gap-4 md:grid-cols-[200px_1fr] items-start";
  return <div className="not-prose p-4 border rounded-xl space-y-4">
      {!hideInput && <label className="block text-sm font-medium">
          App ID
          <input type="text" placeholder="Enter App Id (eg. app_f88bb2a....)" value={appId} onChange={e => setAppId(e.target.value)} className="mt-1 w-full rounded-lg border px-3 py-2" aria-label="App ID" />
        </label>}

      {trimmed && !isValid && <p className="text-sm text-red-600">
          Invalid App Id. Eg. app_xxxxxxxxxxx
        </p>}

      <div className={containerGridClass}>
        <div className="flex items-center justify-center border rounded-xl p-2 bg-white">
          {isValid && payload ? <img src={qrSrc} alt={`QR for ${payload}`} width="200" height="200" loading="eager" /> : <div className="w-[200px] h-[200px] grid place-items-center text-sm text-gray-500">
              {hideInput ? "Provide an App ID via props" : "Enter a valid App ID"}
            </div>}
        </div>

        {!hideDetails && <div className="space-y-2 text-sm">
            <div className="text-gray-700">
              Encoded value:
              <code className="ml-2 px-2 py-1 rounded bg-gray-100">
                {payload || "(empty)"}
              </code>
            </div>
            <ol className="list-decimal pl-5 space-y-1">
              <li>Enter your App ID {hideInput ? "via props" : "above"}.</li>
              <li>Scan the QR with your phoneâ€™s camera.</li>
              <li>Confirm the prompt in World App.</li>
            </ol>
          </div>}
      </div>
    </div>;
};

Commands are defined actions your mini app can perform in World App. Every command is available as either:

* a synchronous function that dispatches an event, the result of which has to be listened for,
* an async function, that can be awaited, resolves with the result.

To quickly get a sense of how commands work, you can scan the QR code below with your phone (you must have World App installed).

<div className="flex justify-center my-4">
  <QRCodeGenerator hideInput={true} hideDetails={true} appId="app_dfbe55706a640c82dce839bb0ecae74d" baseUrl="https://world.org/mini-app" />
</div>

<table>
  <thead>
    <tr>
      <th className="p-2 text-left align-middle">Command</th>
      <th className="p-2 text-left align-middle">Description</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td className="flex items-center p-2">Verify</td>
      <td className="p-2 align-middle">Verify an action with World ID.</td>
    </tr>

    <tr>
      <td className="p-2 align-middle">Pay</td>
      <td className="p-2 align-middle">Initiate a payment request.</td>
    </tr>

    <tr>
      <td className="flex items-center p-2">Wallet Auth</td>

      <td className="p-2 align-middle">
        Authenticate via Sign in with Ethereum
      </td>
    </tr>

    <tr>
      <td className="flex items-center p-2">Send Transaction</td>
      <td className="p-2 align-middle">Write to smart contracts</td>
    </tr>

    <tr>
      <td className="flex items-center p-2">Sign Message</td>

      <td className="p-2 align-middle">
        Sign personal messages with your wallet
      </td>
    </tr>

    <tr>
      <td className="flex items-center p-2">Sign Typed Data</td>

      <td className="p-2 align-middle">
        Sign EIP-712 payloads with your wallet
      </td>
    </tr>

    <tr>
      <td className="flex items-center p-2">Share Contacts</td>

      <td className="p-2 align-middle">
        Share your contacts in a privacy preserving way with apps
      </td>
    </tr>

    <tr>
      <td className="flex items-center p-2">Notifications</td>
      <td className="p-2 align-middle">Send notifications to users</td>
    </tr>

    <tr>
      <td className="flex items-center p-2">Quick Actions</td>
      <td className="p-2 align-middle">Use other mini app feature</td>
    </tr>

    <tr>
      <td className="flex items-center p-2">Get Permissions</td>
      <td className="p-2 align-middle">Get user permissions</td>
    </tr>

    <tr>
      <td className="flex items-center p-2">Send Haptic Feedback</td>

      <td className="p-2 align-middle">
        Send haptic feedback to user's device
      </td>
    </tr>

    <tr>
      <td className="flex items-center p-2">Share</td>
      <td className="p-2 align-middle">Share content</td>
    </tr>
  </tbody>
</table>
